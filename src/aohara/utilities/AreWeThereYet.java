//////////////////////////////////AreWeThereYet/////////////////////////////////
package aohara.utilities;

/**
 * A progress bar embedded or in a JDialog
 * @author Andrew O'Hara
 */
public class AreWeThereYet extends javax.swing.JDialog {

    private boolean embed;

//////////////////////////////////Constructor///////////////////////////////////
    /**
     * Creates a new loading bar.  It is in a JDialog by default
     * @param parent The parent component
     */
    public AreWeThereYet(java.awt.Component parent) {
        this.setLocationRelativeTo(parent);
        embed = false;
        initComponents();
    }

//////////////////////////////////Accessors/////////////////////////////////////
    /**
     * Sets this to embed mode and returns the contentPane() so it can be embedded
     * @return the content pane
     */
    public java.awt.Container embed() {
        embed = true;
        return getContentPane();
    }

///////////////////////////////////Methods//////////////////////////////////////
    /**
     * The loading bar now indicates that something is loading.
     * @param totalProgress How many progress events must occur before the loading bar becomes full
     * @param whatIsLoading The name of the loading task to be completed
     */
    public void loadingStarted(int totalProgress, String whatIsLoading) {
        progressBar.setMinimum(0);
        progressBar.setMaximum(totalProgress);
        progressBar.setValue(0);
        progressBar.setString("0%");
        progressBar.setStringPainted(true);
        label.setText("Loading " + whatIsLoading);
        if (embed) {
            getContentPane().setVisible(true);
        } else {
            setVisible(true);
        }
    }

    /**
     * Indicates that another loading progress event has occured.  Increments the loading bar.
     */
    public void loadingProgress() {
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString((String.format("%.3g%n", progressBar.getPercentComplete() * 100)) + "%");
    }

    /**
     * Indicates that the loading has been completed.  Sets the loading bar to the not loading state.
     */
    public void loadingComplete() {
        try {
            Thread.currentThread().sleep(200);
        } catch (InterruptedException ex) {
        }
        label.setText("Loading Complete");
        progressBar.setValue(0);
        progressBar.setString("");
        if (embed) {
            getContentPane().setVisible(false);
        } else {
            setVisible(false);
        }
    }

////////////////////////////////Static Methods//////////////////////////////////
    /**
     * Performs a loading test.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        AreWeThereYet test = new AreWeThereYet(null);
        int size = 100000;

        test.loadingStarted(size, "Test 1");
        for (int i = 0; i < size; i++) {
            test.loadingProgress();
        }
        test.loadingComplete();
        test.loadingStarted(size * 5, "Test 2");
        for (int i = 0; i < size * 5; i++) {
            test.loadingProgress();
        }
        test.loadingComplete();
        System.exit(0);
    }
/////////////////////////////////GUI Components/////////////////////////////////

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Loading");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(143, 141, 141));
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setResizable(false);
        setUndecorated(true);

        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("Finished Loading");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
////////////////////////////////////////////////////////////////////////////////

